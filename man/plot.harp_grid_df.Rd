% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggplot_functions.R
\name{plot.harp_grid_df}
\alias{plot.harp_grid_df}
\title{Plot method for harp_grid_df data frames}
\usage{
\method{plot}{harp_grid_df}(
  x,
  col = NULL,
  facet_col = "valid_dttm",
  map_db = "world",
  poly = FALSE,
  land_colour = "grey70",
  country_outline = "grey30",
  water_colour = NULL,
  upscale_factor = NULL,
  upscale_method = "downsample",
  plot_land = c("before", "after"),
  ...
)
}
\arguments{
\item{x}{a \code{harp_grid_df} data frame.}

\item{col}{<\code{\link[=dplyr_tidy_select]{tidy-select}}> The column to plot.}

\item{facet_col}{<\code{\link[=dplyr_tidy_select]{tidy-select}}> The column to facet by.}

\item{map_db}{The map data base to use. By default this uses "world" from the
\emph{maps} package, but if you have, for example, the \emph{rnaturalearth} package
installed you could use these.}

\item{poly}{Logical. Whether the map should be drawn as paths (\code{FALSE}), or
as polygons that can be filled (\code{TRUE}). Default is \code{FALSE}.}

\item{land_colour}{If \code{poly = TRUE}, the fill colour for land polygons.}

\item{country_outline}{The colour of the country outlines.}

\item{water_colour}{If \code{poly = TRUE}, the colour of water areas.}

\item{upscale_factor}{Set to an integer value to specify any upscaling of
the data before plotting. For example if \code{upscale_factor = 2}, each pixel
in the upscaled grid will represent 2 pixels in each direction from the
original grid. The default behaviour (\code{upscale_factor = NULL}) is to apply
an automatic upscaling that optimises plotting speed without losing too
much detail.}

\item{upscale_method}{The method used for upscaling. See
\code{\link[harpCore]{geo_upscale}} for more details.}

\item{plot_land}{If \code{poly = TRUE}, when to plot the land polygons in relation
to the raster data. Can be "before" (the default) or "after". If "after",
the land polygons will overlay the rasters.}

\item{...}{Other arguments to \code{\link{geom_georaster()}}.}
}
\description{
Plots rasters of the chosen column, \code{col}, faceted by \code{facet_col} with a map.
For faster plotting \code{upscale_factor} could be increased. This method uses
\code{ggplot} to make the plots so colour scales, labels, themes etc. can be
changed or added in the usual way for \code{ggplot}.
}
\details{
In order to speed up plotting, data will be automatically upscaled before
plotting using the downsample method. This behaviour can be overridden by
setting \code{upscale_factor} to an integer value where \code{upscale_factor = 1} means
that no upscaling is done prior to plotting.
}
\examples{
\dontrun{
  # This example reads open data from the Norwegian Meteorogical Institute.
  # The ncdf4 and harpIO packages are required.

  library(harpIO)
  tt <- read_grid(
    paste0(
      "https://thredds.met.no/thredds/dodsC/aromearcticarchive/2024/09/27/",
      "arome_arctic_det_2_5km_20240927T09Z.nc"
    ),
    "t2m",
    lead_time = seq(0, 5),
    file_format = "netcdf",
    data_frame  = TRUE
  )

  # If there is only 1 geolist column you don't need to specify anything
  plot(tt)

  # For highest quality plotting, set upscale_factor = 1. This will impact
  # the plotting speed.
  plot(tt, upscale_factor = 1)

  # You can change the colour scale by adding a new fill scale
  plot(tt, upscale_factor = 4) +
    scale_fill_gradient(low = "yellow", high = "red")

  # Modify the data during the column specification
  plot(tt, col = gridded_data - 273.15, upscale_factor = 4)

  # Colour the land and the sea - this is best illustrated with a paremeter
  # like precipitation.
  pcp <- read_grid(
    paste0(
      "https://thredds.met.no/thredds/dodsC/aromearcticarchive/2024/09/27/",
      "arome_arctic_det_2_5km_20240927T09Z.nc"
    ),
    "pcp",
    lead_time = seq(9, 15),
    file_format = "netcdf",
    data_frame  = TRUE
  )
  # Since we used read_grid, we have to convert the data frame to one that
  # harp recognises as a deterministic forecast so we can decumulate
  colnames(pcp)[colnames(pcp) == "gridded_data"] <- "aa_det"
  pcp <- decum(as_harp_df(pcp), 1)[2:nrow(pcp), ]
  plot(
    pcp, upscale_factor = 4, poly = TRUE,
    water_colour = "#AADDFF", land_colour = "#77BB99"
  ) +
  scale_fill_gradientn(
    colours  = c("grey80", "steelblue", "violetred4"),
    limits   = c(0.125, NA),
    na.value = "transparent",
    trans    = "log",
    breaks   = seq_double(0.125, 8)
  )

  # Or you can overlay land on the temperature plot to only show temperature
  # over the sea. (Note that to do the opposite you will need land mask data)
  # Can also use labs() to change the title & legend title.
  plot(tt, upscale_factor = 4, poly = TRUE, plot_land = "after") +
    labs(
      title = "Temperature over the sea",
      fill  = "[K]"
    )
}

}
