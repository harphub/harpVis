% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_linespline.R
\name{geom_linespline}
\alias{geom_linespline}
\alias{stat_linespline}
\title{Connect control points/observations with an X-spline}
\usage{
geom_linespline(
  mapping = NULL,
  data = NULL,
  stat = "linespline",
  position = "identity",
  na.rm = TRUE,
  show.legend = NA,
  inherit.aes = TRUE,
  spline_shape = -0.15,
  open = TRUE,
  rep_ends = TRUE,
  ...
)

stat_linespline(
  mapping = NULL,
  data = NULL,
  geom = "line",
  position = "identity",
  na.rm = TRUE,
  show.legend = NA,
  inherit.aes = TRUE,
  spline_shape = -0.25,
  open = TRUE,
  rep_ends = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{spline_shape}{A numeric vector of values between -1 and 1, which
control the shape of the spline relative to the control points.}

\item{open}{A logical value indicating whether the spline is an open or a
closed shape.}

\item{rep_ends}{For open X-splines, a logical value indicating whether the
first and last control points should be replicated for drawing the curve.
Ignored for closed X-splines.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}'s \code{params} argument. These
arguments broadly fall into one of 4 categories below. Notably, further
arguments to the \code{position} argument, or aesthetics that are required
can \emph{not} be passed through \code{...}. Unknown arguments that are not part
of the 4 categories below are ignored.
\itemize{
\item Static aesthetics that are not mapped to a scale, but are at a fixed
value and apply to the layer as a whole. For example, \code{colour = "red"}
or \code{linewidth = 3}. The geom's documentation has an \strong{Aesthetics}
section that lists the available options. The 'required' aesthetics
cannot be passed on to the \code{params}. Please note that while passing
unmapped aesthetics as vectors is technically possible, the order and
required length is not guaranteed to be parallel to the input data.
\item When constructing a layer using
a \verb{stat_*()} function, the \code{...} argument can be used to pass on
parameters to the \code{geom} part of the layer. An example of this is
\code{stat_density(geom = "area", outline.type = "both")}. The geom's
documentation lists which parameters it can accept.
\item Inversely, when constructing a layer using a
\verb{geom_*()} function, the \code{...} argument can be used to pass on parameters
to the \code{stat} part of the layer. An example of this is
\code{geom_area(stat = "density", adjust = 0.5)}. The stat's documentation
lists which parameters it can accept.
\item The \code{key_glyph} argument of \code{\link[ggplot2:layer]{layer()}} may also be passed on through
\code{...}. This can be one of the functions described as
\link[ggplot2:draw_key]{key glyphs}, to change the display of the layer in the legend.
}}

\item{geom, stat}{Use to override the default connection between
\code{geom_linespline} and \code{stat_linespline}.}
}
\description{
Draw an X-spline line - a curve drawn relative to control
points/observations. Patterned after \code{\link[ggplot2]{geom_line}} in that
it orders the points by \code{x} first before computing the splines.
}
\details{
An X-spline is a line drawn relative to control points. For each
control point, the line may pass through (interpolate) the control point or
it may only approach (approximate) the control point; the behaviour is
determined by a shape parameter for each control point.

If the shape parameter is greater than zero, the spline approximates the
control points (and is very similar to a cubic B-spline when the shape is
1). If the shape parameter is less than zero, the spline interpolates the
control points (and is very similar to a Catmull-Rom spline when the shape
is -1). If the shape parameter is 0, the spline forms a sharp corner at
that control point.

For open X-splines, the start and end control points must have a shape of 0
(and non-zero values are silently converted to zero).

For open X-splines, by default the start and end control points are
replicated before the curve is drawn. A curve is drawn between
(interpolating or approximating) the second and third of each set of four
control points, so this default behaviour ensures that the resulting curve
starts at the first control point you have specified and ends at the last
control point. The default behaviour can be turned off via the repEnds
argument.
}
\section{Aesthetics}{
 \code{geom_linespline} understands the following
aesthetics (required aesthetics are in bold): \itemize{ \item
\strong{\code{x}} \item \strong{\code{y}} \item \code{alpha}
\item \code{color} \item \strong{\code{fill}} \item
\strong{\code{group}} \item \code{linetype} \item \code{size} }
}

\section{Computed variables}{

\itemize{
\item{x}
\item{y}
}
}

\references{
Blanc, C. and Schlick, C. (1995), "X-splines : A Spline Model
Designed for the End User", in \emph{Proceedings of SIGGRAPH 95}, pp.
377-386. \url{http://dept-info.labri.fr/~schlick/DOC/sig1.html}
}
\seealso{
\code{\link[ggplot2]{geom_line}}: Connect observations;
\code{\link[ggplot2]{geom_path}}: Connect observations;
\code{\link[ggplot2]{geom_polygon}}: Filled paths (polygons);
\code{\link[ggplot2]{geom_segment}}: Line segments;

Other xspline implementations: 
\code{\link{geom_ribbonspline}()}
}
\concept{xspline implementations}
